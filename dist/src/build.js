(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"./src/js/App.js":[function(require,module,exports){
var Parent = require('./Parent')

React.render(React.createElement(Parent, null), document.getElementById('app'));


},{"./Parent":"/Users/Mark/ReactSandbox/src/js/Parent.js"}],"/Users/Mark/ReactSandbox/src/js/Child.js":[function(require,module,exports){
var Child = React.createClass({displayName: "Child",
	render: function(){
		return (
			React.createElement("div", null, 
				"and this is the awesome ", React.createElement("b", null, this.props.name, " and ", this.props.place)
			)
		)
	}
});

module.exports = Child;


},{}],"/Users/Mark/ReactSandbox/src/js/Parent.js":[function(require,module,exports){
var Child = require('./Child')
var Todo = require('./Todo')
var Parent = React.createClass({displayName: "Parent",
	getInitialState: function(){
		//if the data was being populated this key would need to be set dynamically as to not overwrite current data
		return {
			text: '',
			key: 1,
			todos: []
		}
	},
	updateNewTodo: function(e){
		this.setState({
			text: e.target.value
		})
	},
	handleAddToDo: function(){
		var newArr = this.state.todos;
		var newTodo = {
			text: this.state.text,
			key: this.state.key
		}
		newArr.push(newTodo)
		this.setState({
			text: '',
			key: this.state.key + 1,
			todos: newArr
		});
	},
	render: function(){
		return (
			React.createElement("div", null, 
				React.createElement("div", null, "This is the parent. "), 
				React.createElement(Child, {name: "child div", place: "hello"}), 
				React.createElement("input", {type: "text", placeholder: "What do you need to do?", value: this.state.text, onChange: this.updateNewTodo}), 
				React.createElement("button", {onClick: this.handleAddToDo}, "Add To Do"), 
				React.createElement(Todo, {todos: this.state.todos})
			)
		)
	}
});

module.exports = Parent;



},{"./Child":"/Users/Mark/ReactSandbox/src/js/Child.js","./Todo":"/Users/Mark/ReactSandbox/src/js/Todo.js"}],"/Users/Mark/ReactSandbox/src/js/Todo.js":[function(require,module,exports){
var Todo = React.createClass({displayName: "Todo",
	getInitialState: function(){
		return {
			checkbox: false
		}
	},
	handleTodo: function(e){
		//TODO: how do I get reference to the props, tried passing an argument, but that didn't work, this only looks at the input
		console.log(e)
		
		var todos = this.props.todos;
		console.log('checkbox', this.state.checkbox);
		
		this.setState({
			checkbox: !this.state.checkbox
		})
		
	},
	render: function(){
		var todos = this.props.todos.map(function(todo){
			return React.createElement("li", {key: todo.key}, " ", todo.text, " ", React.createElement("input", {type: "checkbox", checked: this.state.checkbox, value: todo.key, onChange: this.handleTodo}))
		}.bind(this));
		return (
			React.createElement("div", null, 
				React.createElement("h4", null, "To Do React"), 
					React.createElement("ul", null, 
						todos
					)
			)	
		)
	}
});
module.exports = Todo;


},{}]},{},["./src/js/App.js"])
//# sourceMappingURL=data:application/json;base64,
