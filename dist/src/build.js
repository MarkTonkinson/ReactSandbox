(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"./src/js/App.js":[function(require,module,exports){
var Parent = require('./Parent')

React.render(React.createElement(Parent, null), document.getElementById('app'));


},{"./Parent":"/Users/Mark/ReactSandbox/src/js/Parent.js"}],"/Users/Mark/ReactSandbox/src/js/Child.js":[function(require,module,exports){
var Child = React.createClass({displayName: "Child",
	render: function(){
		return (
			React.createElement("div", null, 
				"and this is the awesome ", React.createElement("b", null, this.props.name, " and ", this.props.place)
			)
		)
	}
});

module.exports = Child;


},{}],"/Users/Mark/ReactSandbox/src/js/Parent.js":[function(require,module,exports){
var Child = require('./Child')
var Todo = require('./Todo')
var QuickNotes = require('./QuickNotes')
var Parent = React.createClass({displayName: "Parent",
	getInitialState: function(){
		//if the data was being populated this key would need to be set dynamically as to not overwrite current data
		return {
			text: '',
			key: 1,
			todos: []
		}
	},
	updateNewTodo: function(e){
		this.setState({
			text: e.target.value
		})
	},
	handleAddToDo: function(){
		var newArr = this.state.todos;
		var newTodo = {
			text: this.state.text,
			key: this.state.key,
			selected: false
		}
		newArr.push(newTodo)
		this.setState({
			text: '',
			key: this.state.key + 1,
			todos: newArr
		});
	},
	render: function(){
		return (
			React.createElement("div", null, 
				React.createElement("div", null, "This is the parent. "), 
				React.createElement(Child, {name: "child div", place: "hello"}), 
				React.createElement("input", {type: "text", placeholder: "What do you need to do?", value: this.state.text, onChange: this.updateNewTodo}), 
				React.createElement("button", {onClick: this.handleAddToDo}, "Add To Do"), 
				React.createElement(Todo, {todos: this.state.todos}), 
				React.createElement(QuickNotes, null)
			)
		)
	}
});

module.exports = Parent;



},{"./Child":"/Users/Mark/ReactSandbox/src/js/Child.js","./QuickNotes":"/Users/Mark/ReactSandbox/src/js/QuickNotes.js","./Todo":"/Users/Mark/ReactSandbox/src/js/Todo.js"}],"/Users/Mark/ReactSandbox/src/js/QuickNotes.js":[function(require,module,exports){

var divStyle = {
	border: '1px solid black',
	margin: '1rem',
	padding: '0rem 1rem 1rem 1rem',
	width: '20%'
}

var textAreaStyle = {
	width: '100%'
}

var QuickNotes = React.createClass({displayName: "QuickNotes",
	render: function(){
		return (
			React.createElement("div", {style: divStyle}, 
				React.createElement("h3", null, "Notes"), 
				React.createElement("textarea", {style: textAreaStyle})
			)
		)
	}
});

module.exports = QuickNotes




},{}],"/Users/Mark/ReactSandbox/src/js/Todo.js":[function(require,module,exports){
var Todo = React.createClass({displayName: "Todo",
	getInitialState: function(){
		//So I tried to avoid giving the child state, but I can't figure out how to refer to the parent state to make the update
		//This works
		//Next TODO: Work on animating the removes and adds! :)
		//also look into the state.key and making it based on the todos arr.length because otherwise the key just keeps going up - but not sure you can if todos is in their
		return {
			todos: this.props.todos
		}
	},
	handleTodo: function(i){
		//TODO: how do I get reference to the props, tried passing an argument, but that didn't work, this only looks at the input
		this.props.todos[i].selected = true;
		newTodoArr = this.props.todos.splice(i, 1)
		this.setState({
			todos: newTodoArr
		})	

	},
	render: function(){
		
		return (
			React.createElement("div", null, 
				React.createElement("h4", null, "To Do React"), 
					React.createElement("ul", null, 
						this.props.todos.map(function(todo, i){
							return (
								React.createElement("li", {key: todo.key}, " ", todo.text, "  ", React.createElement("input", {type: "checkbox", checked: todo.selected, value: todo.key, onChange: this.handleTodo.bind(this, i)}))
							);
						}, this)
					)
			)	
		)
	}
});
module.exports = Todo;


},{}]},{},["./src/js/App.js"])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvVXNlcnMvTWFyay9SZWFjdFNhbmRib3gvc3JjL2pzL0FwcC5qcyIsIi9Vc2Vycy9NYXJrL1JlYWN0U2FuZGJveC9zcmMvanMvQ2hpbGQuanMiLCIvVXNlcnMvTWFyay9SZWFjdFNhbmRib3gvc3JjL2pzL1BhcmVudC5qcyIsIi9Vc2Vycy9NYXJrL1JlYWN0U2FuZGJveC9zcmMvanMvUXVpY2tOb3Rlcy5qcyIsIi9Vc2Vycy9NYXJrL1JlYWN0U2FuZGJveC9zcmMvanMvVG9kby5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUM7O0FBRWhDLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsUUFBUSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ2hGOzs7QUNIQSxJQUFJLEtBQUssR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUMsV0FBVyxFQUFFLE9BQU87Q0FDbEQsTUFBTSxFQUFFLFVBQVU7RUFDakI7R0FDQyxLQUFLLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxJQUFJO0lBQzlCLDBCQUEwQixFQUFFLEtBQUssQ0FBQyxhQUFhLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUM7SUFDdEc7R0FDRDtFQUNEO0FBQ0YsQ0FBQyxDQUFDLENBQUM7O0FBRUgsTUFBTSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7QUFDdkI7OztBQ1hBLElBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUM7QUFDOUIsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFD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QUUsQ0FBQyxJQUFJLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ25NO09BQ0YsRUFBRSxJQUFJLENBQUM7TUFDUjtJQUNGO0dBQ0Q7RUFDRDtDQUNELENBQUMsQ0FBQztBQUNILE1BQU0sQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO0FBQ3RCIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsInZhciBQYXJlbnQgPSByZXF1aXJlKCcuL1BhcmVudCcpXG5cblJlYWN0LnJlbmRlcihSZWFjdC5jcmVhdGVFbGVtZW50KFBhcmVudCwgbnVsbCksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhcHAnKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lkSEpoYm5ObWIzSnRaV1F1YW5NaUxDSnpiM1Z5WTJWeklqcGJJaTlWYzJWeWN5OU5ZWEpyTDFKbFlXTjBVMkZ1WkdKdmVDOXpjbU12YW5NdlFYQndMbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxFbEJRVWtzVFVGQlRTeEhRVUZITEU5QlFVOHNRMEZCUXl4VlFVRlZMRU5CUVVNN08wRkJSV2hETEV0QlFVc3NRMEZCUXl4TlFVRk5MRU5CUVVNc2IwSkJRVU1zVFVGQlRTeEZRVUZCTEVsQlFVRXNRMEZCUnl4RFFVRkJMRVZCUVVVc1VVRkJVU3hEUVVGRExHTkJRV01zUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXlJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkluWmhjaUJRWVhKbGJuUWdQU0J5WlhGMWFYSmxLQ2N1TDFCaGNtVnVkQ2NwWEc1Y2JsSmxZV04wTG5KbGJtUmxjaWc4VUdGeVpXNTBJQzgrTENCa2IyTjFiV1Z1ZEM1blpYUkZiR1Z0Wlc1MFFubEpaQ2duWVhCd0p5a3BPeUpkZlE9PSIsInZhciBDaGlsZCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtkaXNwbGF5TmFtZTogXCJDaGlsZFwiLFxuXHRyZW5kZXI6IGZ1bmN0aW9uKCl7XG5cdFx0cmV0dXJuIChcblx0XHRcdFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgbnVsbCwgXG5cdFx0XHRcdFwiYW5kIHRoaXMgaXMgdGhlIGF3ZXNvbWUgXCIsIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJiXCIsIG51bGwsIHRoaXMucHJvcHMubmFtZSwgXCIgYW5kIFwiLCB0aGlzLnByb3BzLnBsYWNlKVxuXHRcdFx0KVxuXHRcdClcblx0fVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2hpbGQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lkSEpoYm5ObWIzSnRaV1F1YW5NaUxDSnpiM1Z5WTJWeklqcGJJaTlWYzJWeWN5OU5ZWEpyTDFKbFlXTjBVMkZ1WkdKdmVDOXpjbU12YW5NdlEyaHBiR1F1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNTVUZCU1N3eVFrRkJNa0lzY1VKQlFVRTdRMEZET1VJc1RVRkJUU3hGUVVGRkxGVkJRVlU3UlVGRGFrSTdSMEZEUXl4dlFrRkJRU3hMUVVGSkxFVkJRVUVzU1VGQlF5eEZRVUZCTzBGQlFVRXNTVUZCUVN3d1FrRkJRU3hGUVVOdlFpeHZRa0ZCUVN4SFFVRkZMRVZCUVVFc1NVRkJReXhGUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNTVUZCU1N4RlFVRkRMRTlCUVVFc1JVRkJUU3hKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEV0QlFWVXNRMEZCUVR0SFFVTnNSU3hEUVVGQk8wZEJRMDQ3UlVGRFJEdEJRVU5HTEVOQlFVTXNRMEZCUXl4RFFVRkRPenRCUVVWSUxFMUJRVTBzUTBGQlF5eFBRVUZQTEVkQlFVY3NTMEZCU3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkluWmhjaUJEYUdsc1pDQTlJRkpsWVdOMExtTnlaV0YwWlVOc1lYTnpLSHRjYmx4MGNtVnVaR1Z5T2lCbWRXNWpkR2x2YmlncGUxeHVYSFJjZEhKbGRIVnliaUFvWEc1Y2RGeDBYSFE4WkdsMlBseHVYSFJjZEZ4MFhIUmhibVFnZEdocGN5QnBjeUIwYUdVZ1lYZGxjMjl0WlNBOFlqNTdkR2hwY3k1d2NtOXdjeTV1WVcxbGZTQmhibVFnZTNSb2FYTXVjSEp2Y0hNdWNHeGhZMlY5UEM5aVBseHVYSFJjZEZ4MFBDOWthWFkrWEc1Y2RGeDBLVnh1WEhSOVhHNTlLVHRjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCRGFHbHNaRHNpWFgwPSIsInZhciBDaGlsZCA9IHJlcXVpcmUoJy4vQ2hpbGQnKVxudmFyIFRvZG8gPSByZXF1aXJlKCcuL1RvZG8nKVxudmFyIFF1aWNrTm90ZXMgPSByZXF1aXJlKCcuL1F1aWNrTm90ZXMnKVxudmFyIFBhcmVudCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtkaXNwbGF5TmFtZTogXCJQYXJlbnRcIixcblx0Z2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbigpe1xuXHRcdC8vaWYgdGhlIGRhdGEgd2FzIGJlaW5nIHBvcHVsYXRlZCB0aGlzIGtleSB3b3VsZCBuZWVkIHRvIGJlIHNldCBkeW5hbWljYWxseSBhcyB0byBub3Qgb3ZlcndyaXRlIGN1cnJlbnQgZGF0YVxuXHRcdHJldHVybiB7XG5cdFx0XHR0ZXh0OiAnJyxcblx0XHRcdGtleTogMSxcblx0XHRcdHRvZG9zOiBbXVxuXHRcdH1cblx0fSxcblx0dXBkYXRlTmV3VG9kbzogZnVuY3Rpb24oZSl7XG5cdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHR0ZXh0OiBlLnRhcmdldC52YWx1ZVxuXHRcdH0pXG5cdH0sXG5cdGhhbmRsZUFkZFRvRG86IGZ1bmN0aW9uKCl7XG5cdFx0dmFyIG5ld0FyciA9IHRoaXMuc3RhdGUudG9kb3M7XG5cdFx0dmFyIG5ld1RvZG8gPSB7XG5cdFx0XHR0ZXh0OiB0aGlzLnN0YXRlLnRleHQsXG5cdFx0XHRrZXk6IHRoaXMuc3RhdGUua2V5LFxuXHRcdFx0c2VsZWN0ZWQ6IGZhbHNlXG5cdFx0fVxuXHRcdG5ld0Fyci5wdXNoKG5ld1RvZG8pXG5cdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHR0ZXh0OiAnJyxcblx0XHRcdGtleTogdGhpcy5zdGF0ZS5rZXkgKyAxLFxuXHRcdFx0dG9kb3M6IG5ld0FyclxuXHRcdH0pO1xuXHR9LFxuXHRyZW5kZXI6IGZ1bmN0aW9uKCl7XG5cdFx0cmV0dXJuIChcblx0XHRcdFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgbnVsbCwgXG5cdFx0XHRcdFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgbnVsbCwgXCJUaGlzIGlzIHRoZSBwYXJlbnQuIFwiKSwgXG5cdFx0XHRcdFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ2hpbGQsIHtuYW1lOiBcImNoaWxkIGRpdlwiLCBwbGFjZTogXCJoZWxsb1wifSksIFxuXHRcdFx0XHRSZWFjdC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIiwge3R5cGU6IFwidGV4dFwiLCBwbGFjZWhvbGRlcjogXCJXaGF0IGRvIHlvdSBuZWVkIHRvIGRvP1wiLCB2YWx1ZTogdGhpcy5zdGF0ZS50ZXh0LCBvbkNoYW5nZTogdGhpcy51cGRhdGVOZXdUb2RvfSksIFxuXHRcdFx0XHRSZWFjdC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIsIHtvbkNsaWNrOiB0aGlzLmhhbmRsZUFkZFRvRG99LCBcIkFkZCBUbyBEb1wiKSwgXG5cdFx0XHRcdFJlYWN0LmNyZWF0ZUVsZW1lbnQoVG9kbywge3RvZG9zOiB0aGlzLnN0YXRlLnRvZG9zfSksIFxuXHRcdFx0XHRSZWFjdC5jcmVhdGVFbGVtZW50KFF1aWNrTm90ZXMsIG51bGwpXG5cdFx0XHQpXG5cdFx0KVxuXHR9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBQYXJlbnQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWRISmhibk5tYjNKdFpXUXVhbk1pTENKemIzVnlZMlZ6SWpwYklpOVZjMlZ5Y3k5TllYSnJMMUpsWVdOMFUyRnVaR0p2ZUM5emNtTXZhbk12VUdGeVpXNTBMbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxFbEJRVWtzUzBGQlN5eEhRVUZITEU5QlFVOHNRMEZCUXl4VFFVRlRMRU5CUVVNN1FVRkRPVUlzU1VGQlNTeEpRVUZKTEVkQlFVY3NUMEZCVHl4RFFVRkRMRkZCUVZFc1EwRkJRenRCUVVNMVFpeEpRVUZKTEZWQlFWVXNSMEZCUnl4UFFVRlBMRU5CUVVNc1kwRkJZeXhEUVVGRE8wRkJRM2hETEVsQlFVa3NORUpCUVRSQ0xITkNRVUZCTzBGQlEyaERMRU5CUVVNc1pVRkJaU3hGUVVGRkxGVkJRVlU3TzBWQlJURkNMRTlCUVU4N1IwRkRUaXhKUVVGSkxFVkJRVVVzUlVGQlJUdEhRVU5TTEVkQlFVY3NSVUZCUlN4RFFVRkRPMGRCUTA0c1MwRkJTeXhGUVVGRkxFVkJRVVU3UjBGRFZEdEZRVU5FTzBOQlEwUXNZVUZCWVN4RlFVRkZMRk5CUVZNc1EwRkJReXhEUVVGRE8wVkJRM3BDTEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNN1IwRkRZaXhKUVVGSkxFVkJRVVVzUTBGQlF5eERRVUZETEUxQlFVMHNRMEZCUXl4TFFVRkxPMGRCUTNCQ0xFTkJRVU03UlVGRFJqdERRVU5FTEdGQlFXRXNSVUZCUlN4VlFVRlZPMFZCUTNoQ0xFbEJRVWtzVFVGQlRTeEhRVUZITEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1MwRkJTeXhEUVVGRE8wVkJRemxDTEVsQlFVa3NUMEZCVHl4SFFVRkhPMGRCUTJJc1NVRkJTU3hGUVVGRkxFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNTVUZCU1R0SFFVTnlRaXhIUVVGSExFVkJRVVVzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4SFFVRkhPMGRCUTI1Q0xGRkJRVkVzUlVGQlJTeExRVUZMTzBkQlEyWTdSVUZEUkN4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF6dEZRVU53UWl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRE8wZEJRMklzU1VGQlNTeEZRVUZGTEVWQlFVVTdSMEZEVWl4SFFVRkhMRVZCUVVVc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eEhRVUZITEVkQlFVY3NRMEZCUXp0SFFVTjJRaXhMUVVGTExFVkJRVVVzVFVGQlRUdEhRVU5pTEVOQlFVTXNRMEZCUXp0RlFVTklPME5CUTBRc1RVRkJUU3hGUVVGRkxGVkJRVlU3UlVGRGFrSTdSMEZEUXl4dlFrRkJRU3hMUVVGSkxFVkJRVUVzU1VGQlF5eEZRVUZCTzBsQlEwb3NiMEpCUVVFc1MwRkJTU3hGUVVGQkxFbEJRVU1zUlVGQlFTeHpRa0ZCTUVJc1EwRkJRU3hGUVVGQk8wbEJReTlDTEc5Q1FVRkRMRXRCUVVzc1JVRkJRU3hEUVVGQkxFTkJRVU1zU1VGQlFTeEZRVUZKTEVOQlFVTXNWMEZCUVN4RlFVRlhMRU5CUVVNc1MwRkJRU3hGUVVGTExFTkJRVU1zVDBGQlR5eERRVUZGTEVOQlFVRXNSVUZCUVR0SlFVTjJReXh2UWtGQlFTeFBRVUZOTEVWQlFVRXNRMEZCUVN4RFFVRkRMRWxCUVVFc1JVRkJTU3hEUVVGRExFMUJRVUVzUlVGQlRTeERRVUZETEZkQlFVRXNSVUZCVnl4RFFVRkRMSGxDUVVGQkxFVkJRWGxDTEVOQlFVTXNTMEZCUVN4RlFVRkxMRU5CUVVVc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEVWQlFVTXNRMEZCUXl4UlFVRkJMRVZCUVZFc1EwRkJSU3hKUVVGSkxFTkJRVU1zWVVGQll5eERRVUZGTEVOQlFVRXNSVUZCUVR0SlFVTm9TQ3h2UWtGQlFTeFJRVUZQTEVWQlFVRXNRMEZCUVN4RFFVRkRMRTlCUVVFc1JVRkJUeXhEUVVGRkxFbEJRVWtzUTBGQlF5eGhRVUZsTEVOQlFVRXNSVUZCUVN4WFFVRnJRaXhEUVVGQkxFVkJRVUU3U1VGRGRrUXNiMEpCUVVNc1NVRkJTU3hGUVVGQkxFTkJRVUVzUTBGQlF5eExRVUZCTEVWQlFVc3NRMEZCUlN4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFdEJRVTBzUTBGQlJTeERRVUZCTEVWQlFVRTdTVUZEYUVNc2IwSkJRVU1zVlVGQlZTeEZRVUZCTEVsQlFVVXNRMEZCUVR0SFFVTlNMRU5CUVVFN1IwRkRUanRGUVVORU8wRkJRMFlzUTBGQlF5eERRVUZETEVOQlFVTTdPMEZCUlVnc1RVRkJUU3hEUVVGRExFOUJRVThzUjBGQlJ5eE5RVUZOTEVOQlFVTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUoyWVhJZ1EyaHBiR1FnUFNCeVpYRjFhWEpsS0NjdUwwTm9hV3hrSnlsY2JuWmhjaUJVYjJSdklEMGdjbVZ4ZFdseVpTZ25MaTlVYjJSdkp5bGNiblpoY2lCUmRXbGphMDV2ZEdWeklEMGdjbVZ4ZFdseVpTZ25MaTlSZFdsamEwNXZkR1Z6SnlsY2JuWmhjaUJRWVhKbGJuUWdQU0JTWldGamRDNWpjbVZoZEdWRGJHRnpjeWg3WEc1Y2RHZGxkRWx1YVhScFlXeFRkR0YwWlRvZ1puVnVZM1JwYjI0b0tYdGNibHgwWEhRdkwybG1JSFJvWlNCa1lYUmhJSGRoY3lCaVpXbHVaeUJ3YjNCMWJHRjBaV1FnZEdocGN5QnJaWGtnZDI5MWJHUWdibVZsWkNCMGJ5QmlaU0J6WlhRZ1pIbHVZVzFwWTJGc2JIa2dZWE1nZEc4Z2JtOTBJRzkyWlhKM2NtbDBaU0JqZFhKeVpXNTBJR1JoZEdGY2JseDBYSFJ5WlhSMWNtNGdlMXh1WEhSY2RGeDBkR1Y0ZERvZ0p5Y3NYRzVjZEZ4MFhIUnJaWGs2SURFc1hHNWNkRngwWEhSMGIyUnZjem9nVzExY2JseDBYSFI5WEc1Y2RIMHNYRzVjZEhWd1pHRjBaVTVsZDFSdlpHODZJR1oxYm1OMGFXOXVLR1VwZTF4dVhIUmNkSFJvYVhNdWMyVjBVM1JoZEdVb2UxeHVYSFJjZEZ4MGRHVjRkRG9nWlM1MFlYSm5aWFF1ZG1Gc2RXVmNibHgwWEhSOUtWeHVYSFI5TEZ4dVhIUm9ZVzVrYkdWQlpHUlViMFJ2T2lCbWRXNWpkR2x2YmlncGUxeHVYSFJjZEhaaGNpQnVaWGRCY25JZ1BTQjBhR2x6TG5OMFlYUmxMblJ2Wkc5ek8xeHVYSFJjZEhaaGNpQnVaWGRVYjJSdklEMGdlMXh1WEhSY2RGeDBkR1Y0ZERvZ2RHaHBjeTV6ZEdGMFpTNTBaWGgwTEZ4dVhIUmNkRngwYTJWNU9pQjBhR2x6TG5OMFlYUmxMbXRsZVN4Y2JseDBYSFJjZEhObGJHVmpkR1ZrT2lCbVlXeHpaVnh1WEhSY2RIMWNibHgwWEhSdVpYZEJjbkl1Y0hWemFDaHVaWGRVYjJSdktWeHVYSFJjZEhSb2FYTXVjMlYwVTNSaGRHVW9lMXh1WEhSY2RGeDBkR1Y0ZERvZ0p5Y3NYRzVjZEZ4MFhIUnJaWGs2SUhSb2FYTXVjM1JoZEdVdWEyVjVJQ3NnTVN4Y2JseDBYSFJjZEhSdlpHOXpPaUJ1WlhkQmNuSmNibHgwWEhSOUtUdGNibHgwZlN4Y2JseDBjbVZ1WkdWeU9pQm1kVzVqZEdsdmJpZ3BlMXh1WEhSY2RISmxkSFZ5YmlBb1hHNWNkRngwWEhROFpHbDJQbHh1WEhSY2RGeDBYSFE4WkdsMlBsUm9hWE1nYVhNZ2RHaGxJSEJoY21WdWRDNGdQQzlrYVhZK1hHNWNkRngwWEhSY2REeERhR2xzWkNCdVlXMWxQVndpWTJocGJHUWdaR2wyWENJZ2NHeGhZMlU5WENKb1pXeHNiMXdpTHo1Y2JseDBYSFJjZEZ4MFBHbHVjSFYwSUhSNWNHVTlYQ0owWlhoMFhDSWdjR3hoWTJWb2IyeGtaWEk5WENKWGFHRjBJR1J2SUhsdmRTQnVaV1ZrSUhSdklHUnZQMXdpSUhaaGJIVmxQWHQwYUdsekxuTjBZWFJsTG5SbGVIUjlJRzl1UTJoaGJtZGxQWHQwYUdsekxuVndaR0YwWlU1bGQxUnZaRzk5THo1Y2JseDBYSFJjZEZ4MFBHSjFkSFJ2YmlCdmJrTnNhV05yUFh0MGFHbHpMbWhoYm1Sc1pVRmtaRlJ2Ukc5OVBrRmtaQ0JVYnlCRWJ6d3ZZblYwZEc5dVBseHVYSFJjZEZ4MFhIUThWRzlrYnlCMGIyUnZjejE3ZEdocGN5NXpkR0YwWlM1MGIyUnZjMzB2UGx4dVhIUmNkRngwWEhROFVYVnBZMnRPYjNSbGN5OCtYRzVjZEZ4MFhIUThMMlJwZGo1Y2JseDBYSFFwWEc1Y2RIMWNibjBwTzF4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlGQmhjbVZ1ZER0Y2JpSmRmUT09IiwiXG52YXIgZGl2U3R5bGUgPSB7XG5cdGJvcmRlcjogJzFweCBzb2xpZCBibGFjaycsXG5cdG1hcmdpbjogJzFyZW0nLFxuXHRwYWRkaW5nOiAnMHJlbSAxcmVtIDFyZW0gMXJlbScsXG5cdHdpZHRoOiAnMjAlJ1xufVxuXG52YXIgdGV4dEFyZWFTdHlsZSA9IHtcblx0d2lkdGg6ICcxMDAlJ1xufVxuXG52YXIgUXVpY2tOb3RlcyA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtkaXNwbGF5TmFtZTogXCJRdWlja05vdGVzXCIsXG5cdHJlbmRlcjogZnVuY3Rpb24oKXtcblx0XHRyZXR1cm4gKFxuXHRcdFx0UmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7c3R5bGU6IGRpdlN0eWxlfSwgXG5cdFx0XHRcdFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJoM1wiLCBudWxsLCBcIk5vdGVzXCIpLCBcblx0XHRcdFx0UmVhY3QuY3JlYXRlRWxlbWVudChcInRleHRhcmVhXCIsIHtzdHlsZTogdGV4dEFyZWFTdHlsZX0pXG5cdFx0XHQpXG5cdFx0KVxuXHR9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBRdWlja05vdGVzXG5cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pZEhKaGJuTm1iM0p0WldRdWFuTWlMQ0p6YjNWeVkyVnpJanBiSWk5VmMyVnljeTlOWVhKckwxSmxZV04wVTJGdVpHSnZlQzl6Y21NdmFuTXZVWFZwWTJ0T2IzUmxjeTVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFUdEJRVU5CTEVsQlFVa3NVVUZCVVN4SFFVRkhPME5CUTJRc1RVRkJUU3hGUVVGRkxHbENRVUZwUWp0RFFVTjZRaXhOUVVGTkxFVkJRVVVzVFVGQlRUdERRVU5rTEU5QlFVOHNSVUZCUlN4eFFrRkJjVUk3UTBGRE9VSXNTMEZCU3l4RlFVRkZMRXRCUVVzN1FVRkRZaXhEUVVGRE96dEJRVVZFTEVsQlFVa3NZVUZCWVN4SFFVRkhPME5CUTI1Q0xFdEJRVXNzUlVGQlJTeE5RVUZOTzBGQlEyUXNRMEZCUXpzN1FVRkZSQ3hKUVVGSkxHZERRVUZuUXl3d1FrRkJRVHREUVVOdVF5eE5RVUZOTEVWQlFVVXNWVUZCVlR0RlFVTnFRanRIUVVORExHOUNRVUZCTEV0QlFVa3NSVUZCUVN4RFFVRkJMRU5CUVVNc1MwRkJRU3hGUVVGTExFTkJRVVVzVVVGQlZTeERRVUZCTEVWQlFVRTdTVUZEY2tJc2IwSkJRVUVzU1VGQlJ5eEZRVUZCTEVsQlFVTXNSVUZCUVN4UFFVRlZMRU5CUVVFc1JVRkJRVHRKUVVOa0xHOUNRVUZCTEZWQlFWTXNSVUZCUVN4RFFVRkJMRU5CUVVNc1MwRkJRU3hGUVVGTExFTkJRVVVzWVVGQlpTeERRVUZYTEVOQlFVRTdSMEZEZEVNc1EwRkJRVHRIUVVOT08wVkJRMFE3UVVGRFJpeERRVUZETEVOQlFVTXNRMEZCUXpzN1FVRkZTQ3hOUVVGTkxFTkJRVU1zVDBGQlR5eEhRVUZITEZWQlFWVWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUpjYm5aaGNpQmthWFpUZEhsc1pTQTlJSHRjYmx4MFltOXlaR1Z5T2lBbk1YQjRJSE52Ykdsa0lHSnNZV05ySnl4Y2JseDBiV0Z5WjJsdU9pQW5NWEpsYlNjc1hHNWNkSEJoWkdScGJtYzZJQ2N3Y21WdElERnlaVzBnTVhKbGJTQXhjbVZ0Snl4Y2JseDBkMmxrZEdnNklDY3lNQ1VuWEc1OVhHNWNiblpoY2lCMFpYaDBRWEpsWVZOMGVXeGxJRDBnZTF4dVhIUjNhV1IwYURvZ0p6RXdNQ1VuWEc1OVhHNWNiblpoY2lCUmRXbGphMDV2ZEdWeklEMGdVbVZoWTNRdVkzSmxZWFJsUTJ4aGMzTW9lMXh1WEhSeVpXNWtaWEk2SUdaMWJtTjBhVzl1S0NsN1hHNWNkRngwY21WMGRYSnVJQ2hjYmx4MFhIUmNkRHhrYVhZZ2MzUjViR1U5ZTJScGRsTjBlV3hsZlQ1Y2JseDBYSFJjZEZ4MFBHZ3pQazV2ZEdWelBDOW9NejVjYmx4MFhIUmNkRngwUEhSbGVIUmhjbVZoSUhOMGVXeGxQWHQwWlhoMFFYSmxZVk4wZVd4bGZUNDhMM1JsZUhSaGNtVmhQbHh1WEhSY2RGeDBQQzlrYVhZK1hHNWNkRngwS1Z4dVhIUjlYRzU5S1R0Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQlJkV2xqYTA1dmRHVnpYRzVjYmlKZGZRPT0iLCJ2YXIgVG9kbyA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtkaXNwbGF5TmFtZTogXCJUb2RvXCIsXG5cdGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24oKXtcblx0XHQvL1NvIEkgdHJpZWQgdG8gYXZvaWQgZ2l2aW5nIHRoZSBjaGlsZCBzdGF0ZSwgYnV0IEkgY2FuJ3QgZmlndXJlIG91dCBob3cgdG8gcmVmZXIgdG8gdGhlIHBhcmVudCBzdGF0ZSB0byBtYWtlIHRoZSB1cGRhdGVcblx0XHQvL1RoaXMgd29ya3Ncblx0XHQvL05leHQgVE9ETzogV29yayBvbiBhbmltYXRpbmcgdGhlIHJlbW92ZXMgYW5kIGFkZHMhIDopXG5cdFx0Ly9hbHNvIGxvb2sgaW50byB0aGUgc3RhdGUua2V5IGFuZCBtYWtpbmcgaXQgYmFzZWQgb24gdGhlIHRvZG9zIGFyci5sZW5ndGggYmVjYXVzZSBvdGhlcndpc2UgdGhlIGtleSBqdXN0IGtlZXBzIGdvaW5nIHVwIC0gYnV0IG5vdCBzdXJlIHlvdSBjYW4gaWYgdG9kb3MgaXMgaW4gdGhlaXJcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9kb3M6IHRoaXMucHJvcHMudG9kb3Ncblx0XHR9XG5cdH0sXG5cdGhhbmRsZVRvZG86IGZ1bmN0aW9uKGkpe1xuXHRcdC8vVE9ETzogaG93IGRvIEkgZ2V0IHJlZmVyZW5jZSB0byB0aGUgcHJvcHMsIHRyaWVkIHBhc3NpbmcgYW4gYXJndW1lbnQsIGJ1dCB0aGF0IGRpZG4ndCB3b3JrLCB0aGlzIG9ubHkgbG9va3MgYXQgdGhlIGlucHV0XG5cdFx0dGhpcy5wcm9wcy50b2Rvc1tpXS5zZWxlY3RlZCA9IHRydWU7XG5cdFx0bmV3VG9kb0FyciA9IHRoaXMucHJvcHMudG9kb3Muc3BsaWNlKGksIDEpXG5cdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHR0b2RvczogbmV3VG9kb0FyclxuXHRcdH0pXHRcblxuXHR9LFxuXHRyZW5kZXI6IGZ1bmN0aW9uKCl7XG5cdFx0XG5cdFx0cmV0dXJuIChcblx0XHRcdFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgbnVsbCwgXG5cdFx0XHRcdFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJoNFwiLCBudWxsLCBcIlRvIERvIFJlYWN0XCIpLCBcblx0XHRcdFx0XHRSZWFjdC5jcmVhdGVFbGVtZW50KFwidWxcIiwgbnVsbCwgXG5cdFx0XHRcdFx0XHR0aGlzLnByb3BzLnRvZG9zLm1hcChmdW5jdGlvbih0b2RvLCBpKXtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIChcblx0XHRcdFx0XHRcdFx0XHRSZWFjdC5jcmVhdGVFbGVtZW50KFwibGlcIiwge2tleTogdG9kby5rZXl9LCBcIiBcIiwgdG9kby50ZXh0LCBcIiAgXCIsIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiLCB7dHlwZTogXCJjaGVja2JveFwiLCBjaGVja2VkOiB0b2RvLnNlbGVjdGVkLCB2YWx1ZTogdG9kby5rZXksIG9uQ2hhbmdlOiB0aGlzLmhhbmRsZVRvZG8uYmluZCh0aGlzLCBpKX0pKVxuXHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0fSwgdGhpcylcblx0XHRcdFx0XHQpXG5cdFx0XHQpXHRcblx0XHQpXG5cdH1cbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBUb2RvO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pZEhKaGJuTm1iM0p0WldRdWFuTWlMQ0p6YjNWeVkyVnpJanBiSWk5VmMyVnljeTlOWVhKckwxSmxZV04wVTJGdVpHSnZlQzl6Y21NdmFuTXZWRzlrYnk1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hKUVVGSkxEQkNRVUV3UWl4dlFrRkJRVHRCUVVNNVFpeERRVUZETEdWQlFXVXNSVUZCUlN4VlFVRlZPMEZCUXpWQ08wRkJRMEU3UVVGRFFUczdSVUZGUlN4UFFVRlBPMGRCUTA0c1MwRkJTeXhGUVVGRkxFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNTMEZCU3p0SFFVTjJRanRGUVVORU8wRkJRMFlzUTBGQlF5eFZRVUZWTEVWQlFVVXNVMEZCVXl4RFFVRkRMRU5CUVVNN08wVkJSWFJDTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEZGQlFWRXNSMEZCUnl4SlFVRkpMRU5CUVVNN1JVRkRjRU1zVlVGQlZTeEhRVUZITEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1MwRkJTeXhEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRPMFZCUXpGRExFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTTdSMEZEWWl4TFFVRkxMRVZCUVVVc1ZVRkJWVHRCUVVOd1FpeEhRVUZITEVOQlFVTTdPMFZCUlVZN1FVRkRSaXhEUVVGRExFMUJRVTBzUlVGQlJTeFZRVUZWT3p0RlFVVnFRanRIUVVORExHOUNRVUZCTEV0QlFVa3NSVUZCUVN4SlFVRkRMRVZCUVVFN1NVRkRTaXh2UWtGQlFTeEpRVUZITEVWQlFVRXNTVUZCUXl4RlFVRkJMR0ZCUVdkQ0xFTkJRVUVzUlVGQlFUdExRVU51UWl4dlFrRkJRU3hKUVVGSExFVkJRVUVzU1VGQlF5eEZRVUZCTzAxQlEwWXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhMUVVGTExFTkJRVU1zUjBGQlJ5eERRVUZETEZOQlFWTXNTVUZCU1N4RlFVRkZMRU5CUVVNc1EwRkJRenRQUVVOMFF6dFJRVU5ETEc5Q1FVRkJMRWxCUVVjc1JVRkJRU3hEUVVGQkxFTkJRVU1zUjBGQlFTeEZRVUZITEVOQlFVVXNTVUZCU1N4RFFVRkRMRWRCUVVzc1EwRkJRU3hGUVVGQkxFZEJRVUVzUlVGQlJTeEpRVUZKTEVOQlFVTXNTVUZCU1N4RlFVRkRMRWxCUVVFc1JVRkJSU3h2UWtGQlFTeFBRVUZOTEVWQlFVRXNRMEZCUVN4RFFVRkRMRWxCUVVFc1JVRkJTU3hEUVVGRExGVkJRVUVzUlVGQlZTeERRVUZETEU5QlFVRXNSVUZCVHl4RFFVRkZMRWxCUVVrc1EwRkJReXhSUVVGUkxFVkJRVU1zUTBGQlF5eExRVUZCTEVWQlFVc3NRMEZCUlN4SlFVRkpMRU5CUVVNc1IwRkJSeXhGUVVGRExFTkJRVU1zVVVGQlFTeEZRVUZSTEVOQlFVVXNTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeEZRVUZGTEVOQlFVTXNRMEZCUlN4RFFVRkZMRU5CUVVzc1EwRkJRVHRUUVVNdlNUdFBRVU5HTEVWQlFVVXNTVUZCU1N4RFFVRkZPMHRCUTB3c1EwRkJRVHRIUVVORUxFTkJRVUU3UjBGRFRqdEZRVU5FTzBOQlEwUXNRMEZCUXl4RFFVRkRPMEZCUTBnc1RVRkJUU3hEUVVGRExFOUJRVThzUjBGQlJ5eEpRVUZKSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWRtRnlJRlJ2Wkc4Z1BTQlNaV0ZqZEM1amNtVmhkR1ZEYkdGemN5aDdYRzVjZEdkbGRFbHVhWFJwWVd4VGRHRjBaVG9nWm5WdVkzUnBiMjRvS1h0Y2JseDBYSFF2TDFOdklFa2dkSEpwWldRZ2RHOGdZWFp2YVdRZ1oybDJhVzVuSUhSb1pTQmphR2xzWkNCemRHRjBaU3dnWW5WMElFa2dZMkZ1SjNRZ1ptbG5kWEpsSUc5MWRDQm9iM2NnZEc4Z2NtVm1aWElnZEc4Z2RHaGxJSEJoY21WdWRDQnpkR0YwWlNCMGJ5QnRZV3RsSUhSb1pTQjFjR1JoZEdWY2JseDBYSFF2TDFSb2FYTWdkMjl5YTNOY2JseDBYSFF2TDA1bGVIUWdWRTlFVHpvZ1YyOXlheUJ2YmlCaGJtbHRZWFJwYm1jZ2RHaGxJSEpsYlc5MlpYTWdZVzVrSUdGa1pITWhJRG9wWEc1Y2RGeDBMeTloYkhOdklHeHZiMnNnYVc1MGJ5QjBhR1VnYzNSaGRHVXVhMlY1SUdGdVpDQnRZV3RwYm1jZ2FYUWdZbUZ6WldRZ2IyNGdkR2hsSUhSdlpHOXpJR0Z5Y2k1c1pXNW5kR2dnWW1WallYVnpaU0J2ZEdobGNuZHBjMlVnZEdobElHdGxlU0JxZFhOMElHdGxaWEJ6SUdkdmFXNW5JSFZ3SUMwZ1luVjBJRzV2ZENCemRYSmxJSGx2ZFNCallXNGdhV1lnZEc5a2IzTWdhWE1nYVc0Z2RHaGxhWEpjYmx4MFhIUnlaWFIxY200Z2UxeHVYSFJjZEZ4MGRHOWtiM002SUhSb2FYTXVjSEp2Y0hNdWRHOWtiM05jYmx4MFhIUjlYRzVjZEgwc1hHNWNkR2hoYm1Sc1pWUnZaRzg2SUdaMWJtTjBhVzl1S0drcGUxeHVYSFJjZEM4dlZFOUVUem9nYUc5M0lHUnZJRWtnWjJWMElISmxabVZ5Wlc1alpTQjBieUIwYUdVZ2NISnZjSE1zSUhSeWFXVmtJSEJoYzNOcGJtY2dZVzRnWVhKbmRXMWxiblFzSUdKMWRDQjBhR0YwSUdScFpHNG5kQ0IzYjNKckxDQjBhR2x6SUc5dWJIa2diRzl2YTNNZ1lYUWdkR2hsSUdsdWNIVjBYRzVjZEZ4MGRHaHBjeTV3Y205d2N5NTBiMlJ2YzF0cFhTNXpaV3hsWTNSbFpDQTlJSFJ5ZFdVN1hHNWNkRngwYm1WM1ZHOWtiMEZ5Y2lBOUlIUm9hWE11Y0hKdmNITXVkRzlrYjNNdWMzQnNhV05sS0drc0lERXBYRzVjZEZ4MGRHaHBjeTV6WlhSVGRHRjBaU2g3WEc1Y2RGeDBYSFIwYjJSdmN6b2dibVYzVkc5a2IwRnljbHh1WEhSY2RIMHBYSFJjYmx4dVhIUjlMRnh1WEhSeVpXNWtaWEk2SUdaMWJtTjBhVzl1S0NsN1hHNWNkRngwWEc1Y2RGeDBjbVYwZFhKdUlDaGNibHgwWEhSY2REeGthWFkrWEc1Y2RGeDBYSFJjZER4b05ENVVieUJFYnlCU1pXRmpkRHd2YURRK1hHNWNkRngwWEhSY2RGeDBQSFZzUGx4dVhIUmNkRngwWEhSY2RGeDBlM1JvYVhNdWNISnZjSE11ZEc5a2IzTXViV0Z3S0daMWJtTjBhVzl1S0hSdlpHOHNJR2twZTF4dVhIUmNkRngwWEhSY2RGeDBYSFJ5WlhSMWNtNGdLRnh1WEhSY2RGeDBYSFJjZEZ4MFhIUmNkRHhzYVNCclpYazllM1J2Wkc4dWEyVjVmVDRnZTNSdlpHOHVkR1Y0ZEgwZ0lEeHBibkIxZENCMGVYQmxQVndpWTJobFkydGliM2hjSWlCamFHVmphMlZrUFh0MGIyUnZMbk5sYkdWamRHVmtmU0IyWVd4MVpUMTdkRzlrYnk1clpYbDlJRzl1UTJoaGJtZGxQWHQwYUdsekxtaGhibVJzWlZSdlpHOHVZbWx1WkNoMGFHbHpMQ0JwS1gwdlBqd3ZiR2srWEc1Y2RGeDBYSFJjZEZ4MFhIUmNkQ2s3WEc1Y2RGeDBYSFJjZEZ4MFhIUjlMQ0IwYUdsektYMWNibHgwWEhSY2RGeDBYSFE4TDNWc1BseHVYSFJjZEZ4MFBDOWthWFkrWEhSY2JseDBYSFFwWEc1Y2RIMWNibjBwTzF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCVWIyUnZPeUpkZlE9PSJdfQ==
