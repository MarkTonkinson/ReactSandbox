(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"./src/js/App.js":[function(require,module,exports){
var Parent = require('./Parent')

React.render(React.createElement(Parent, null), document.getElementById('app'));


},{"./Parent":"/Users/Mark/ReactSandbox/src/js/Parent.js"}],"/Users/Mark/ReactSandbox/src/js/Child.js":[function(require,module,exports){
var Child = React.createClass({displayName: "Child",
	render: function(){
		return (
			React.createElement("div", null, 
				"and this is the awesome ", React.createElement("b", null, this.props.name)
			)
		)
	}
});

module.exports = Child;


},{}],"/Users/Mark/ReactSandbox/src/js/Parent.js":[function(require,module,exports){
var Child = require('./Child')
var Parent = React.createClass({displayName: "Parent",
	render: function(){
		return (
			React.createElement("div", null, 
				React.createElement("div", null, "This is the parent. "), 
				React.createElement(Child, {name: "child div"})
			)
		)
	}
});

module.exports = Parent;



},{"./Child":"/Users/Mark/ReactSandbox/src/js/Child.js"}]},{},["./src/js/App.js"])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvVXNlcnMvTWFyay9SZWFjdFNhbmRib3gvc3JjL2pzL0FwcC5qcyIsIi9Vc2Vycy9NYXJrL1JlYWN0U2FuZGJveC9zcmMvanMvQ2hpbGQuanMiLCIvVXNlcnMvTWFyay9SZWFjdFNhbmRib3gvc3JjL2pzL1BhcmVudC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUM7O0FBRWhDLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsUUFBUSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ2hGOzs7QUNIQSxJQUFJLEtBQUssR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUMsV0FBVyxFQUFFLE9BQU87Q0FDbEQsTUFBTSxFQUFFLFVBQVU7RUFDakI7R0FDQyxLQUFLLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxJQUFJO0lBQzlCLDBCQUEwQixFQUFFLEtBQUssQ0FBQyxhQUFhLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztJQUMzRTtHQUNEO0VBQ0Q7QUFDRixDQUFDLENBQUMsQ0FBQzs7QUFFSCxNQUFNLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztBQUN2Qjs7O0FDWEEsSUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQztBQUM5QixJQUFJLE1BQU0sR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUMsV0FBVyxFQUFFLFFBQVE7Q0FDcEQsTUFBTSxFQUFFLFVBQVU7RUFDakI7R0FDQyxLQUFLLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxJQUFJO0lBQzlCLEtBQUssQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxzQkFBc0IsQ0FBQztJQUN4RCxLQUFLLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsQ0FBQztJQUMvQztHQUNEO0VBQ0Q7QUFDRixDQUFDLENBQUMsQ0FBQzs7QUFFSCxNQUFNLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQzs7QUFFeEIiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwidmFyIFBhcmVudCA9IHJlcXVpcmUoJy4vUGFyZW50JylcblxuUmVhY3QucmVuZGVyKFJlYWN0LmNyZWF0ZUVsZW1lbnQoUGFyZW50LCBudWxsKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FwcCcpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWRISmhibk5tYjNKdFpXUXVhbk1pTENKemIzVnlZMlZ6SWpwYklpOVZjMlZ5Y3k5TllYSnJMMUpsWVdOMFUyRnVaR0p2ZUM5emNtTXZhbk12UVhCd0xtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEVsQlFVa3NUVUZCVFN4SFFVRkhMRTlCUVU4c1EwRkJReXhWUVVGVkxFTkJRVU03TzBGQlJXaERMRXRCUVVzc1EwRkJReXhOUVVGTkxFTkJRVU1zYjBKQlFVTXNUVUZCVFN4RlFVRkJMRWxCUVVFc1EwRkJSeXhEUVVGQkxFVkJRVVVzVVVGQlVTeERRVUZETEdOQlFXTXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW5aaGNpQlFZWEpsYm5RZ1BTQnlaWEYxYVhKbEtDY3VMMUJoY21WdWRDY3BYRzVjYmxKbFlXTjBMbkpsYm1SbGNpZzhVR0Z5Wlc1MElDOCtMQ0JrYjJOMWJXVnVkQzVuWlhSRmJHVnRaVzUwUW5sSlpDZ25ZWEJ3SnlrcE95SmRmUT09IiwidmFyIENoaWxkID0gUmVhY3QuY3JlYXRlQ2xhc3Moe2Rpc3BsYXlOYW1lOiBcIkNoaWxkXCIsXG5cdHJlbmRlcjogZnVuY3Rpb24oKXtcblx0XHRyZXR1cm4gKFxuXHRcdFx0UmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBudWxsLCBcblx0XHRcdFx0XCJhbmQgdGhpcyBpcyB0aGUgYXdlc29tZSBcIiwgUmVhY3QuY3JlYXRlRWxlbWVudChcImJcIiwgbnVsbCwgdGhpcy5wcm9wcy5uYW1lKVxuXHRcdFx0KVxuXHRcdClcblx0fVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2hpbGQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lkSEpoYm5ObWIzSnRaV1F1YW5NaUxDSnpiM1Z5WTJWeklqcGJJaTlWYzJWeWN5OU5ZWEpyTDFKbFlXTjBVMkZ1WkdKdmVDOXpjbU12YW5NdlEyaHBiR1F1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNTVUZCU1N3eVFrRkJNa0lzY1VKQlFVRTdRMEZET1VJc1RVRkJUU3hGUVVGRkxGVkJRVlU3UlVGRGFrSTdSMEZEUXl4dlFrRkJRU3hMUVVGSkxFVkJRVUVzU1VGQlF5eEZRVUZCTzBGQlFVRXNTVUZCUVN3d1FrRkJRU3hGUVVOdlFpeHZRa0ZCUVN4SFFVRkZMRVZCUVVFc1NVRkJReXhGUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNTVUZCVXl4RFFVRkJPMGRCUXpORExFTkJRVUU3UjBGRFRqdEZRVU5FTzBGQlEwWXNRMEZCUXl4RFFVRkRMRU5CUVVNN08wRkJSVWdzVFVGQlRTeERRVUZETEU5QlFVOHNSMEZCUnl4TFFVRkxJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpZG1GeUlFTm9hV3hrSUQwZ1VtVmhZM1F1WTNKbFlYUmxRMnhoYzNNb2UxeHVYSFJ5Wlc1a1pYSTZJR1oxYm1OMGFXOXVLQ2w3WEc1Y2RGeDBjbVYwZFhKdUlDaGNibHgwWEhSY2REeGthWFkrWEc1Y2RGeDBYSFJjZEdGdVpDQjBhR2x6SUdseklIUm9aU0JoZDJWemIyMWxJRHhpUG50MGFHbHpMbkJ5YjNCekxtNWhiV1Y5UEM5aVBseHVYSFJjZEZ4MFBDOWthWFkrWEc1Y2RGeDBLVnh1WEhSOVhHNTlLVHRjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCRGFHbHNaRHNpWFgwPSIsInZhciBDaGlsZCA9IHJlcXVpcmUoJy4vQ2hpbGQnKVxudmFyIFBhcmVudCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtkaXNwbGF5TmFtZTogXCJQYXJlbnRcIixcblx0cmVuZGVyOiBmdW5jdGlvbigpe1xuXHRcdHJldHVybiAoXG5cdFx0XHRSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIG51bGwsIFxuXHRcdFx0XHRSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIG51bGwsIFwiVGhpcyBpcyB0aGUgcGFyZW50LiBcIiksIFxuXHRcdFx0XHRSZWFjdC5jcmVhdGVFbGVtZW50KENoaWxkLCB7bmFtZTogXCJjaGlsZCBkaXZcIn0pXG5cdFx0XHQpXG5cdFx0KVxuXHR9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBQYXJlbnQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWRISmhibk5tYjNKdFpXUXVhbk1pTENKemIzVnlZMlZ6SWpwYklpOVZjMlZ5Y3k5TllYSnJMMUpsWVdOMFUyRnVaR0p2ZUM5emNtTXZhbk12VUdGeVpXNTBMbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxFbEJRVWtzUzBGQlN5eEhRVUZITEU5QlFVOHNRMEZCUXl4VFFVRlRMRU5CUVVNN1FVRkRPVUlzU1VGQlNTdzBRa0ZCTkVJc2MwSkJRVUU3UTBGREwwSXNUVUZCVFN4RlFVRkZMRlZCUVZVN1JVRkRha0k3UjBGRFF5eHZRa0ZCUVN4TFFVRkpMRVZCUVVFc1NVRkJReXhGUVVGQk8wbEJRMG9zYjBKQlFVRXNTMEZCU1N4RlFVRkJMRWxCUVVNc1JVRkJRU3h6UWtGQk1FSXNRMEZCUVN4RlFVRkJPMGxCUXk5Q0xHOUNRVUZETEV0QlFVc3NSVUZCUVN4RFFVRkJMRU5CUVVNc1NVRkJRU3hGUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZGTEVOQlFVRTdSMEZEY0VJc1EwRkJRVHRIUVVOT08wVkJRMFE3UVVGRFJpeERRVUZETEVOQlFVTXNRMEZCUXpzN1FVRkZTQ3hOUVVGTkxFTkJRVU1zVDBGQlR5eEhRVUZITEUxQlFVMHNRMEZCUXlJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkluWmhjaUJEYUdsc1pDQTlJSEpsY1hWcGNtVW9KeTR2UTJocGJHUW5LVnh1ZG1GeUlGQmhjbVZ1ZENBOUlGSmxZV04wTG1OeVpXRjBaVU5zWVhOektIdGNibHgwY21WdVpHVnlPaUJtZFc1amRHbHZiaWdwZTF4dVhIUmNkSEpsZEhWeWJpQW9YRzVjZEZ4MFhIUThaR2wyUGx4dVhIUmNkRngwWEhROFpHbDJQbFJvYVhNZ2FYTWdkR2hsSUhCaGNtVnVkQzRnUEM5a2FYWStYRzVjZEZ4MFhIUmNkRHhEYUdsc1pDQnVZVzFsUFZ3aVkyaHBiR1FnWkdsMlhDSXZQbHh1WEhSY2RGeDBQQzlrYVhZK1hHNWNkRngwS1Z4dVhIUjlYRzU5S1R0Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQlFZWEpsYm5RN1hHNGlYWDA9Il19
